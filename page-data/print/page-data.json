{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","webpackCompilationHash":"7fc107e26fc1d58ede9a","result":{"data":{"deck":{"id":"f27b2745-a33b-584b-868b-93c53d27e598","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Angular Code Quality\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Standard Change Detection\"), mdx(DemoImage, {\n    src: \"assets/standard-change-detection.gif\",\n    mdxType: \"DemoImage\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"OnPush Change Detection\"), mdx(DemoImage, {\n    src: \"assets/on-push-change-detection.gif\",\n    mdxType: \"DemoImage\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"This is a title\\\" subtitle=\\\"and this a subtitle\\\"\",\n    \"title\": \"\\\"This\",\n    \"is\": true,\n    \"a\": true,\n    \"title\\\"\": true,\n    \"subtitle\": \"\\\"and\",\n    \"this\": true,\n    \"subtitle\\\"\": true\n  }), \"function lorem(ipsum, dolor = 1) {\\n  const sit = ipsum == null ? 0 : ipsum.sit;\\n  dolor = sit - amet(dolor);\\n  return sit\\n    ? consectetur(ipsum, 0, dolor < 0 ? 0 : dolor)\\n    : [];\\n}\\n\\nfunction incididunt(ipsum, ut = 1) {\\n  ut = labore.et(amet(ut), 0);\\n  const sit = ipsum == null ? 0 : ipsum.sit;\\n\\n  if (!sit || ut < 1) {\\n    return [];\\n  }\\n\\n  let dolore = 0;\\n  let magna = 0;\\n  const aliqua = new eiusmod(labore.ut(sit / ut));\\n\\n  while (dolore < sit) {\\n    aliqua[magna++] = consectetur(\\n      ipsum,\\n      dolore,\\n      (dolore += ut)\\n    );\\n  }\\n\\n  return aliqua;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function lorem(ipsum, dolor = 1) {\\n  const sit = ipsum == null ? 0 : ipsum.sit;\\n  dolor = sit - amet(dolor);\\n  return sit\\n    ? consectetur(ipsum, 0, dolor < 0 ? 0 : dolor)\\n    : [];\\n}\\n\\nfunction adipiscing(...elit) {\\n  if (!elit.sit) {\\n    return [];\\n  }\\n\\n  const sed = elit[0];\\n  return eiusmod.tempor(sed) ? sed : [sed];\\n}\\n\\nfunction incididunt(ipsum, ut = 1) {\\n  ut = labore.et(amet(ut), 0);\\n  const sit = ipsum == null ? 0 : ipsum.sit;\\n\\n  if (!sit || ut < 1) {\\n    return [];\\n  }\\n\\n  let dolore = 0;\\n  let magna = 0;\\n  const aliqua = new eiusmod(labore.ut(sit / ut));\\n\\n  while (dolore < sit) {\\n    aliqua[magna++] = consectetur(\\n      ipsum,\\n      dolore,\\n      (dolore += ut)\\n    );\\n  }\\n\\n  return aliqua;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1[10:14],2[15:19],3[22:27],10:12\",\n    \"1[10:14],2[15:19],3[22:27],10:12\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const magna = aliqua => aliqua.ut((enim, ad) => enim, 0);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const minim = (ad, enim) => dolore.magna(ad / enim);\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const lorem = (ipsum, dolor, sit) => {\\n  const amet = dolor - ipsum;\\n  return consectetur.adipiscing(\\n    {\\n      elit: sed.eiusmod(sit - dolor) / amet + 2,\\n    },\\n    (tempor, incididunt) => ipsum + amet * incididunt\\n  );\\n};\\n\\nconst magna = aliqua => aliqua.ut((enim, ad) => enim, 0);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const minim = (ad, enim) => dolore.magna(ad / enim);\\n\\nconst sed = (eiusmod, tempor, incididunt) => {\\n  const ut = tempor - eiusmod;\\n  return labore.et(\\n    {\\n      amet: dolore.magna(incididunt - tempor) / ut + 2,\\n    },\\n    (aliqua, elit) => eiusmod + ut * elit\\n  );\\n};\\n\")))), mdx(\"hr\", null), mdx(\"p\", null, \"docs:\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codesurfer.pomb.us\"\n  }), \"codesurfer.pomb.us\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"f27b2745-a33b-584b-868b-93c53d27e598","slug":"","title":"Angular Code Quality"}}}